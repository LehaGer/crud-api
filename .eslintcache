[{"C:\\OpenServer\\domains\\crud-api\\src\\index.ts":"1","C:\\OpenServer\\domains\\crud-api\\src\\types\\index.ts":"2","C:\\OpenServer\\domains\\crud-api\\src\\service\\UsersDB\\index.ts":"3","C:\\OpenServer\\domains\\crud-api\\src\\loadBalancer\\index.ts":"4","C:\\OpenServer\\domains\\crud-api\\src\\server\\index.ts":"5","C:\\OpenServer\\domains\\crud-api\\src\\tests\\index.test.ts":"6","C:\\OpenServer\\domains\\crud-api\\src\\customFunctions\\index.ts":"7"},{"size":1095,"mtime":1673899925397,"results":"8","hashOfConfig":"9"},{"size":309,"mtime":1673795699860,"results":"10","hashOfConfig":"9"},{"size":1247,"mtime":1673892340490,"results":"11","hashOfConfig":"9"},{"size":2252,"mtime":1673909966114,"results":"12","hashOfConfig":"9"},{"size":8262,"mtime":1673909168230,"results":"13","hashOfConfig":"9"},{"size":3899,"mtime":1673899676268,"results":"14","hashOfConfig":"9"},{"size":941,"mtime":1673900428331,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"914w99",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\OpenServer\\domains\\crud-api\\src\\index.ts",[],[],"C:\\OpenServer\\domains\\crud-api\\src\\types\\index.ts",[],[],"C:\\OpenServer\\domains\\crud-api\\src\\service\\UsersDB\\index.ts",[],[],"C:\\OpenServer\\domains\\crud-api\\src\\loadBalancer\\index.ts",["38"],[],"C:\\OpenServer\\domains\\crud-api\\src\\server\\index.ts",["39"],[],"import { MethodsTypes } from '../types';\r\nimport http from 'node:http';\r\nimport UsersDB from '../service/UsersDB';\r\nimport { getData, isCorrectUuidFormat, isCorrespondingToUserSchema } from '../customFunctions';\r\nimport cluster from 'node:cluster';\r\n\r\nconst server = http.createServer(async (req, res) => {\r\n  try {\r\n    const reqUrlParsed = req.url.trim().substring(1).split('/');\r\n\r\n    if (reqUrlParsed[0] === 'api') {\r\n      const apiResourceType = reqUrlParsed[1];\r\n      if (apiResourceType === 'users') {\r\n        const resourceUUId = reqUrlParsed[2];\r\n        switch (req.method as MethodsTypes) {\r\n          case MethodsTypes.GET: {\r\n            if (resourceUUId) {\r\n              if (!isCorrectUuidFormat(resourceUUId)) {\r\n                res.setHeader('Content-Type', 'application/json');\r\n                res.statusCode = 400;\r\n                res.statusMessage = 'userId has incorrect format (not uuid)';\r\n                res.write(\r\n                  JSON.stringify({\r\n                    status: 400,\r\n                    message: 'userId has incorrect format (not uuid)',\r\n                  })\r\n                );\r\n                res.end();\r\n              } else {\r\n                const user = UsersDB.getUser(resourceUUId);\r\n                if (user) {\r\n                  res.setHeader('Content-Type', 'application/json');\r\n                  res.statusCode = 200;\r\n                  res.statusMessage = 'user(s) successfully founded';\r\n                  res.write(JSON.stringify(user));\r\n                  res.end();\r\n                } else {\r\n                  res.setHeader('Content-Type', 'application/json');\r\n                  res.statusCode = 404;\r\n                  res.statusMessage = \"record with this id doesn't exist\";\r\n                  res.write(\r\n                    JSON.stringify({\r\n                      status: 404,\r\n                      message: \"record with this id doesn't exist\",\r\n                    })\r\n                  );\r\n                  res.end();\r\n                }\r\n              }\r\n            } else {\r\n              const allUsers = UsersDB.getUser();\r\n              res.setHeader('Content-Type', 'application/json');\r\n              res.write(JSON.stringify(allUsers));\r\n              res.statusCode = 200;\r\n              res.end();\r\n            }\r\n            break;\r\n          }\r\n          case MethodsTypes.POST: {\r\n            if (resourceUUId) {\r\n              throw {\r\n                name: 'IncorrectPathException',\r\n                message: 'The path is incorrect ðŸ˜¢',\r\n              };\r\n            }\r\n            const data = await getData(req);\r\n            if (isCorrespondingToUserSchema(data)) {\r\n              UsersDB.postUser(data);\r\n              res.setHeader('Content-Type', 'application/json');\r\n              res.statusCode = 201;\r\n              res.statusMessage = 'successfully added';\r\n              res.write(\r\n                JSON.stringify({\r\n                  status: 201,\r\n                  message: 'new user successfully added',\r\n                })\r\n              );\r\n              res.end();\r\n            } else {\r\n              res.setHeader('Content-Type', 'application/json');\r\n              res.statusCode = 400;\r\n              res.statusMessage = 'request body does not contain required fields';\r\n              res.write(\r\n                JSON.stringify({\r\n                  status: 400,\r\n                  message: 'request body does not contain required fields',\r\n                })\r\n              );\r\n              res.end();\r\n            }\r\n            break;\r\n          }\r\n          case MethodsTypes.PUT: {\r\n            if (!resourceUUId) {\r\n              throw {\r\n                name: 'IncorrectPathException',\r\n                message: 'The path is incorrect ðŸ˜¢',\r\n              };\r\n            }\r\n            if (!isCorrectUuidFormat(resourceUUId)) {\r\n              res.setHeader('Content-Type', 'application/json');\r\n              res.statusCode = 400;\r\n              res.statusMessage = 'userId is invalid (not uuid)';\r\n              res.write(\r\n                JSON.stringify({\r\n                  status: 400,\r\n                  message: 'userId is invalid (not uuid)',\r\n                })\r\n              );\r\n              res.end();\r\n              break;\r\n            }\r\n            if (!UsersDB.getUser(resourceUUId)) {\r\n              res.setHeader('Content-Type', 'application/json');\r\n              res.statusCode = 404;\r\n              res.statusMessage = \"record with id === userId doesn't exist\";\r\n              res.write(\r\n                JSON.stringify({\r\n                  status: 404,\r\n                  message: \"record with id === userId doesn't exist\",\r\n                })\r\n              );\r\n              res.end();\r\n              break;\r\n            }\r\n            const data = await getData(req);\r\n            UsersDB.putUser(resourceUUId, data);\r\n            res.setHeader('Content-Type', 'application/json');\r\n            res.statusCode = 200;\r\n            res.statusMessage = 'successfully updating';\r\n            res.write(\r\n              JSON.stringify({\r\n                status: 200,\r\n                message: \"user's record was successfully updated\",\r\n              })\r\n            );\r\n            res.end();\r\n            break;\r\n          }\r\n          case MethodsTypes.DELETE: {\r\n            if (!resourceUUId) {\r\n              throw {\r\n                name: 'IncorrectPathException',\r\n                message: 'The path is incorrect ðŸ˜¢',\r\n              };\r\n            }\r\n            if (!isCorrectUuidFormat(resourceUUId)) {\r\n              res.setHeader('Content-Type', 'application/json');\r\n              res.statusCode = 400;\r\n              res.statusMessage = 'userId is invalid (not uuid)';\r\n              res.write(\r\n                JSON.stringify({\r\n                  status: 400,\r\n                  message: 'userId is invalid (not uuid)',\r\n                })\r\n              );\r\n              res.end();\r\n              break;\r\n            }\r\n            if (!UsersDB.getUser(resourceUUId)) {\r\n              res.setHeader('Content-Type', 'application/json');\r\n              res.statusCode = 404;\r\n              res.statusMessage = \"record with id === userId doesn't exist\";\r\n              res.write(\r\n                JSON.stringify({\r\n                  status: 404,\r\n                  message: \"record with id === userId doesn't exist\",\r\n                })\r\n              );\r\n              res.end();\r\n              break;\r\n            }\r\n            UsersDB.deleteUser(resourceUUId);\r\n            res.setHeader('Content-Type', 'application/json');\r\n            res.statusCode = 204;\r\n            res.statusMessage = \"successfully record's deleting\";\r\n            res.write(\r\n              JSON.stringify({\r\n                status: 204,\r\n                message: \"user's record was successfully deleted\",\r\n              })\r\n            );\r\n            res.end();\r\n            break;\r\n          }\r\n          default: {\r\n            throw {\r\n              name: 'IncorrectPathException',\r\n              message: 'seems like your request doesnt correspond to any available method ðŸ˜¢',\r\n            };\r\n          }\r\n        }\r\n      } else {\r\n        throw {\r\n          name: 'IncorrectPathException',\r\n          message: 'The path is incorrect ðŸ˜¢',\r\n        };\r\n      }\r\n    } else {\r\n      throw {\r\n        name: 'IncorrectPathException',\r\n        message: 'The path is incorrect ðŸ˜¢',\r\n      };\r\n    }\r\n  } catch (exception) {\r\n    switch (exception.name) {\r\n      case 'Error': {\r\n        console.error(exception.message);\r\n        res.setHeader('Content-Type', 'text/html');\r\n        res.statusCode = 500;\r\n        res.statusMessage = 'internal server error';\r\n        res.write('<h1>some server-side error has been occurred ðŸ˜¢</h1>');\r\n        res.end();\r\n        break;\r\n      }\r\n      case 'IncorrectPathException': {\r\n        res.setHeader('Content-Type', 'text/html');\r\n        res.statusCode = 404;\r\n        res.statusMessage = 'The path is incorrect';\r\n        res.write(`<h1>${exception.message}</h1>`);\r\n        res.end();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\n/*\r\nserver.on('clientError', (err, socket) => {\r\n  socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\r\n});*/\r\n\r\nexport default server;\r\n","C:\\OpenServer\\domains\\crud-api\\src\\tests\\index.test.ts",[],[],"C:\\OpenServer\\domains\\crud-api\\src\\customFunctions\\index.ts",[],[],{"ruleId":"40","severity":1,"message":"41","line":4,"column":8,"nodeType":"42","messageId":"43","endLine":4,"endColumn":15},{"ruleId":"40","severity":1,"message":"41","line":5,"column":8,"nodeType":"42","messageId":"43","endLine":5,"endColumn":15},"@typescript-eslint/no-unused-vars","'cluster' is defined but never used.","Identifier","unusedVar"]